generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String?
  password    String
  role        Role          @default(USER)
  books       Book[]
  bookshelves BookShelves[] 
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Book {
  id            String           @id @default(cuid())
  title         String
  author        String
  coverImageUrl String?           // Optional cover image URL
  reviews       Review[]
  bookshelves   BooksOnShelves[] 
  users         User[]
  category      Category?        @relation(fields: [categoryId], references: [id]) // Optional relation to Category
  categoryId    String?          // Optional category ID
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Review {
  id        String  @id @default(uuid())
  bookId    String
  text      String
  rating    Int
  authorId  String?  // Ensure this allows null values
  createdAt DateTime @default(now())

  book   Book   @relation(fields: [bookId], references: [id]) 
  author User?  @relation(fields: [authorId], references: [id]) // Make the relation optional
}




model BookShelves {
  id     String           @id @default(cuid())
  name   String
  user   User             @relation(fields: [userId], references: [id])
  userId String
  books  BooksOnShelves[] 
}

model BooksOnShelves {
  id          String       @id @default(cuid())
  book        Book         @relation(fields: [bookId], references: [id])
  bookId      String
  bookshelf   BookShelves  @relation(fields: [bookshelfId], references: [id])
  bookshelfId String
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  books Book[] // Relation to books
}

enum Role {
  USER
  ADMIN
}
